Part a - addWorkingPeriod

Input space: employee != null

Partion #1: starttime < 0 
	test_s1_part1: input: "starttime = -5", expected: addWorkingPeriod() = false
Partion #2: endtime >= size
	test_s1_part2: input: "scheduleSize=10, endtime=14" expected: addWorkingPeriod() = false
Partion #3: starttime > endtime
	test_s1_part3: input: "starttime = 7, endTime = 4" expected: addWorkingPeriod() = false
Partion #4: workingEmployees().length == requiredNumber
	test_s1_part4: input: "setRequiredNumber(0, 0, 2), starttime = 0, endtime = 2" expected: addWorkingPeriod() = false
Partion #5: Partion1-5 false/otherwise
	test_s1_part5: input: "employee='A', starttime = 0, endtime = 2" expected: addWorkingPeriod() = true
Partion #6: workingEmployees().contains(employee)
	test_s1_part6: input: "employee='A', starttime = 0, endtime = 2, workingEmployees(0,2).contains('A')" expected: addWorkingPeriod() = false


Border cases:
	test_s1_border1: input: "starttime = 0", expected: "addWorkingPeriod() = true"
	test_s1_border2: input: "starttime = -1", expected: "addWorkingPeriod() = false"
	test_s1_border3: input: "endtime = size-1", expected: "addWorkingPeriod() = true"
	test_s1_border4: input: "endtime = size", expected: "addWorkingPeriod() = false"
	test_s1_border5: input: "starttime = endtime", expected: "addWorkingPeriod() = true"
	test_s1_border6: input: "starttime = endtime+1", expected: "addWorkingPeriod() = false"
	test_s1_border7: input: "workingEmployees().length = requiredNumber - 1", expected: "addWorkingPeriod() = true"
	test_s1_border8: input: "workingEmployees().length = requiredNumber", expected: "addWorkingPeriod() = false"
	test_s1_border9: input: "workingEmployees(0, 2).contains('A') employee = 'A' starttime = 2, endTime = 4", expected: "addWorkingPeriod() = true" 
	test_s1_border10: input: "workingEmployees(0, 2).contains('A') employee = 'A' starttime = 1, endTime = 4", expected: "addWorkingPeriod() = false"
           ^border10 ska krocka fÃ¶r att det redan finns en employee med samma namn den tiden

----------------------------------------------------------------------------------------------------------------------------------
Part b - workingEmployees



Input Space: starttime >= 0, endtime < size

Partition #1: starttime > endtime 
	partition1b: input: "starttime = 4, endtime = 3", expected: "workingEmployees() = []"
Partition #2: startime <= endtime
	partition2b: input: "starttime = 0, endtime = 4, expected: "workingEmployees() = String[]"	

Border cases: 
	workingPeriod = wp, workingEmployees = we
	border1b: input: "we.starttime = wp.starttime, ", Expected "workingEmployees() = [+] 
	border2b: input: "we.endtime + 1 = wp.endtime, ", Expected "workingEmployees() = [+]
	border3b: input: "we.starttime + 1 = wp.starttime, we.endtime - 1 = wp.endtime", Expected "workingEmployees() = [+]
	border4b: input: "we.starttime = wp.starttime, we.endtime = wp.endtime", Expected "workingEmployees() = [+]
	border5b: input: "we.starttime - 1 = wp.starttime, we.endtime + 1 = wp.endtime", Expected "workingEmployees() = [+]
	border6b: input: "we.starttime + 1 = wp.starttime, we.endtime - 1 = wp.starttime", Expected "workingEmployees() = [+]
	border7b: input: "we.endtime - 1 = wp.starttime, we.endtime + 1 = wp.endtime", Expected "workingEmployees() = [+]
	border8b: input: "we.starttime - 1 = wp.starttime, we.starttime + 1 = wp.starttime", Expected "workingEmployees() = [+]
	border9b: input: "we.endtime - 1 = wp.starttime, we.endtime + 1 = wp.endtime", Expected "workingEmployees() = [+]
	border10b: input: "we.starttime = wp.endtime", Expected "workingEmployees() = [-]
	border11b: input: "we.endtime = wp.startime", Expected "workingEmployees() = [-]
