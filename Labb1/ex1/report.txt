Part a - addWorkingPeriod

Explanation of why we divided the test cases as we did:
	We chose to make test there the input was smaller, bigger and equals to the limits, that is 0, size of the scedule and the
	number of required workers, even to add same person twice. This was because these were the different valuse that the method
	ensured that it could handle. We than used border cases around these limits.

Input space: employee != null

Partion #1: starttime < 0 
	test_s1_part1: input: "starttime = -5", expected: addWorkingPeriod() = false
Partion #2: endtime >= size
	test_s1_part2: input: "scheduleSize=10, endtime=14" expected: addWorkingPeriod() = false
Partion #3: starttime > endtime
	test_s1_part3: input: "starttime = 5, endTime = 4" expected: addWorkingPeriod() = false
Partion #4: workingEmployees().length == requiredNumber
	test_s1_part4: input: "setRequiredNumber(0, 0, 2), starttime = 0, endtime = 2" expected: addWorkingPeriod() = false
Partion #5: Partion1-5 false/otherwise
	test_s1_part5: input: "employee='A', starttime = 0, endtime = 2" expected: addWorkingPeriod() = true
Partion #6: workingEmployees().contains(employee)
	test_s1_part6: input: "employee='A', starttime = 0, endtime = 2, workingEmployees(0,2).contains('A')" expected: addWorkingPeriod() = false


Border cases:
	test_s1_border1: input: "starttime = 0", expected: "addWorkingPeriod() = true"
	test_s1_border2: input: "starttime = -1", expected: "addWorkingPeriod() = false"
	test_s1_border3: input: "endtime = size-1", expected: "addWorkingPeriod() = true"
	test_s1_border4: input: "endtime = size", expected: "addWorkingPeriod() = false"
	test_s1_border5: input: "starttime = endtime", expected: "addWorkingPeriod() = true"
	test_s1_border6: input: "starttime = endtime+1", expected: "addWorkingPeriod() = false"
	test_s1_border7: input: "workingEmployees().length = requiredNumber - 1", expected: "addWorkingPeriod() = true"
	test_s1_border8: input: "workingEmployees().length = requiredNumber", expected: "addWorkingPeriod() = false"
	test_s1_border9: input: "workingEmployees(0, 2).contains('A') employee = 'A' starttime = 2, endTime = 4", expected: "addWorkingPeriod() = true" 
	test_s1_border10: input: "workingEmployees(0, 2).contains('A') employee = 'A' starttime = 1, endTime = 4", expected: "addWorkingPeriod() = false"
           ^border10 ska krocka f√∂r att det redan finns en employee med samma namn den tiden



Found Bugs: test_s1_part3(testStarttimeBiggerThanEndtime), startime = 5, endTime = 4, expected = false.
	    test_s1_border9, a worker should be able to work 0-2 and 2-4. Expected true
----------------------------------------------------------------------------------------------------------------------------------
Part b - workingEmployees

Explanation: We divided the test into just two partitions because there only one "rule" that the method ensured it could handle,
	that is that it could handle starttime <= endtime, so the partitions were starttime <= endtime and starttime > endtime.
	Then we used border cases that were slightly lower or higher than these conditions.

Input Space: starttime >= 0, endtime < size

Partition #1: starttime > endtime 
	partition1b: input: "starttime = 4, endtime = 3", expected: "workingEmployees() = []"
Partition #2: startime <= endtime
	partition2b: input: "starttime = 0, endtime = 4, expected: "workingEmployees() = String[]"	

Border cases: 
	workingPeriod = wp, workingEmployees = we
	border1b: input: "we.starttime = wp.starttime, ", Expected "workingEmployees() = [+] 
	border2b: input: "we.endtime + 1 = wp.endtime, ", Expected "workingEmployees() = [+]
	border3b: input: "we.starttime + 1 = wp.starttime, we.endtime - 1 = wp.endtime", Expected "workingEmployees() = [+]
	border4b: input: "we.starttime = wp.starttime, we.endtime = wp.endtime", Expected "workingEmployees() = [+]
	border5b: input: "we.starttime - 1 = wp.starttime, we.endtime + 1 = wp.endtime", Expected "workingEmployees() = [+]
	border6b: input: "we.starttime + 1 = wp.starttime, we.endtime - 1 = wp.starttime", Expected "workingEmployees() = [+]
	border7b: input: "we.endtime - 1 = wp.starttime, we.endtime + 1 = wp.endtime", Expected "workingEmployees() = [+]
	border8b: input: "we.starttime - 1 = wp.starttime, we.starttime + 1 = wp.starttime", Expected "workingEmployees() = [+]
	border9b: input: "we.endtime - 1 = wp.starttime, we.endtime + 1 = wp.endtime", Expected "workingEmployees() = [+]
	border10b: input: "we.starttime = wp.endtime", Expected "workingEmployees() = [-]
	border11b: input: "we.endtime = wp.startime", Expected "workingEmployees() = [-]
	
	
Found bugs: partition1b, starttime = 4, endtime = 2, starttime > endtime, therefore should result in and empty array.
	    border3b, expected : non-empty arrray, returns an empty array.
	    border10b, workingPeriod is just before the starttime of the workingEmployees() call, the array should therefore be empty, 	but is not.
	    border 11b, same as before but with endtime.
